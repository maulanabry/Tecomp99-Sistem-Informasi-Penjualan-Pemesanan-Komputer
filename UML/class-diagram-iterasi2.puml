@startuml Owner & Technician E-commerce & Service Management System - Iteration 2

skinparam linetype ortho
skinparam classAttributeIconSize 0
skinparam classFontSize 9
skinparam nodesep 15
skinparam ranksep 30
skinparam class {
    BackgroundColor White
    BorderColor Black
    ArrowColor Black
}

' ===== AUTHENTICATION & USER MANAGEMENT =====

class AuthController {
    --
    + index(): View
    + login(request: Request): RedirectResponse
    + logout(): RedirectResponse
    --
    + authenticateTeknisi(credentials: array): boolean
    + authenticatePemilik(credentials: array): boolean
    + updateLastSeen(userId: int): void
}

class ManajemenPenggunaController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(admin: Admin): View
    + edit(admin: Admin): View
    + update(request: Request, admin: Admin): RedirectResponse
    + destroy(admin: Admin): RedirectResponse
    + recovery(): View
    + restore(id: int): RedirectResponse
    + forceDelete(id: int): RedirectResponse
    --
    + createTechnician(data: array): Admin
    + updateTechnician(id: int, data: array): boolean
    + deleteTechnician(id: int): boolean
    + restoreTechnician(id: int): boolean
}

' ===== CORE MODELS =====

class Admin {
    - id: int
    - name: string
    - email: string
    - password: string
    - role: string
    - theme: string
    - last_seen_at: datetime
    - email_verified_at: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + isOnline(): boolean
    + notifications(): MorphMany
    + chats(): HasMany
    + chatMessages(): HasMany
    + getChatWithCustomer(customerId: string): Chat
    + getActiveChats(): Collection
    + getUnreadMessagesCountAttribute(): int
    + getChatsWithUnreadMessages(): Collection
}

class Customer {
    - customer_id: string
    - name: string
    - email: string
    - password: string
    - contact: string
    - gender: string
    - photo: string
    - hasAccount: boolean
    - hasAddress: boolean
    - last_active: datetime
    - service_orders_count: int
    - product_orders_count: int
    - total_points: int
    - email_verified_at: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + addresses(): HasMany
    + defaultAddress(): HasOne
    + orderProducts(): HasMany
    + orderServices(): HasMany
    + cartItems(): HasMany
    + notifications(): MorphMany
    + chats(): HasMany
    + getFormattedAddress(): string
    + getWhatsappLink(): string
}

class CustomerAddress {
    - id: int
    - customer_id: string
    - detail_address: string
    - is_default: boolean
    - created_at: datetime
    - updated_at: datetime
    --
    + customer(): BelongsTo
}

' ===== PRODUCT & SERVICE MODELS =====

class Category {
    - categories_id: int
    - name: string
    - type: string
    - slug: string
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + products(): HasMany
    + services(): HasMany
    + generateSlug(): string
}

class Brand {
    - brand_id: int
    - name: string
    - slug: string
    - logo: string
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + products(): HasMany
}

class Product {
    - product_id: string
    - categories_id: int
    - brand_id: int
    - name: string
    - description: string
    - price: decimal
    - weight: int
    - stock: int
    - is_active: boolean
    - sold_count: int
    - slug: string
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + category(): BelongsTo
    + brand(): BelongsTo
    + images(): HasMany
    + getThumbnailUrl(): string
    + updateStock(quantity: int): void
    + incrementSoldCount(): void
}

class ProductImage {
    - id: int
    - product_id: string
    - url: string
    - is_main: boolean
    - created_at: datetime
    - updated_at: datetime
    --
    + product(): BelongsTo
}

class Service {
    - service_id: string
    - categories_id: int
    - name: string
    - description: string
    - price: decimal
    - thumbnail: string
    - slug: string
    - is_active: boolean
    - sold_count: int
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + category(): BelongsTo
    + getThumbnailUrl(): string
    + incrementSoldCount(): void
}

' ===== ORDER MODELS =====

class OrderProduct {
    - order_product_id: string
    - customer_id: string
    - status_order: string
    - status_payment: string
    - sub_total: decimal
    - discount_amount: decimal
    - grand_total: decimal
    - shipping_cost: decimal
    - type: string
    - note: string
    - warranty_period_months: int
    - warranty_expired_at: datetime
    - paid_amount: decimal
    - remaining_balance: decimal
    - last_payment_at: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + customer(): BelongsTo
    + items(): HasMany
    + payments(): HasMany
    + shipping(): HasOne
    + updatePaymentStatus(): void
    + processPayment(amount: decimal, type: string): decimal
    + canAcceptPayment(): boolean
    + getWarrantyStatusAttribute(): array
    + updateWarrantyExpiration(completionDate: DateTimeInterface): void
    + validatePayment(amount: decimal, paymentType: string): array
}

class OrderProductItem {
    - id: int
    - order_product_id: string
    - product_id: string
    - quantity: int
    - price: decimal
    - total: decimal
    - created_at: datetime
    - updated_at: datetime
    --
    + orderProduct(): BelongsTo
    + product(): BelongsTo
}

class OrderService {
    - order_service_id: string
    - customer_id: string
    - status_order: string
    - status_payment: string
    - complaints: string
    - type: string
    - device: string
    - note: string
    - hasTicket: boolean
    - hasDevice: boolean
    - sub_total: decimal
    - grand_total: decimal
    - discount_amount: decimal
    - warranty_period_months: int
    - warranty_expired_at: datetime
    - paid_amount: decimal
    - remaining_balance: decimal
    - last_payment_at: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + customer(): BelongsTo
    + items(): HasMany
    + images(): HasMany
    + media(): HasMany
    + tickets(): HasMany
    + paymentDetails(): HasMany
    + updatePaymentStatus(): void
    + processPayment(amount: decimal, type: string): decimal
    + canAcceptPayment(): boolean
    + getWarrantyStatus(): array
}

class OrderServiceItem {
    - id: int
    - order_service_id: string
    - service_id: string
    - quantity: int
    - price: decimal
    - total: decimal
    - created_at: datetime
    - updated_at: datetime
    --
    + orderService(): BelongsTo
    + service(): BelongsTo
}

class Shipping {
    - id: int
    - order_product_id: string
    - courier: string
    - service: string
    - cost: decimal
    - tracking_number: string
    - status: string
    - created_at: datetime
    - updated_at: datetime
    --
    + orderProduct(): BelongsTo
}

' ===== PAYMENT MODEL =====

class PaymentDetail {
    - payment_id: string
    - order_product_id: string
    - order_service_id: string
    - method: string
    - amount: decimal
    - change_returned: decimal
    - name: string
    - status: string
    - payment_type: string
    - order_type: string
    - proof_photo: string
    - cash_received: decimal
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + orderProduct(): BelongsTo
    + orderService(): BelongsTo
    + getOrder(): Model
    + validate(): array
    + getFormattedAmount(): string
    + getProofPhotoUrl(): string
}

' ===== SERVICE TICKET MODELS =====

class ServiceTicket {
    - service_ticket_id: string
    - order_service_id: string
    - admin_id: int
    - status: string
    - schedule_date: datetime
    - estimation_days: int
    - estimate_date: datetime
    - visit_schedule: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + orderService(): BelongsTo
    + admin(): BelongsTo
    + actions(): HasMany
    + updateStatus(status: string): void
    + assignTechnician(adminId: int): void
}

class ServiceAction {
    - id: int
    - service_ticket_id: string
    - action: string
    - description: string
    - number: int
    - created_at: datetime
    - updated_at: datetime
    --
    + serviceTicket(): BelongsTo
}

' ===== BASE CONTROLLER =====

abstract class BaseController {
    # admin: Admin
    --
    + __construct()
    # authorize(permission: string): void
    # validateRequest(rules: array): array
}

' ===== OWNER CONTROLLERS =====

class OwnerOrderProductController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(id: string): View
    + edit(id: string): View
    + update(request: Request, id: string): RedirectResponse
    + destroy(id: string): RedirectResponse
    + editShipping(id: string): View
    + updateShipping(request: Request, id: string): RedirectResponse
    + showInvoice(id: string): View
    --
    + createOrder(data: array): OrderProduct
    + updateOrder(id: string, data: array): boolean
    + updateShippingInfo(id: string, data: array): boolean
    + generateInvoice(id: string): array
    + cancelOrder(id: string, reason: string): boolean
}

class OwnerOrderServiceController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(id: string): View
    + edit(id: string): View
    + update(request: Request, id: string): RedirectResponse
    + showInvoice(id: string): View
    + showTandaTerima(id: string): View
    --
    + createServiceOrder(data: array): OrderService
    + updateServiceOrder(id: string, data: array): boolean
    + assignTechnician(orderId: string, adminId: int): boolean
    + scheduleService(orderId: string, schedule: datetime): boolean
    + generateInvoice(id: string): array
    + generateReceipt(id: string): array
}

class OwnerPaymentController {
    --
    + index(): View
    + show(id: string): View
    + confirm(request: Request, id: string): RedirectResponse
    + reject(request: Request, id: string): RedirectResponse
    --
    + getPendingPayments(): Collection
    + confirmPayment(paymentId: string): boolean
    + rejectPayment(paymentId: string, reason: string): boolean
    + validatePaymentProof(paymentId: string): boolean
    + updatePaymentStatus(paymentId: string, status: string): boolean
}

class LaporanController {
    --
    + penjualanProduk(request: Request): View
    + pemesananServis(request: Request): View
    + exportPdf(request: Request): Response
    + exportExcel(request: Request): Response
    + exportServicePdf(request: Request): Response
    + exportServiceExcel(request: Request): Response
    --
    + getSalesSummary(start: Carbon, end: Carbon): array
    + getSalesData(start: Carbon, end: Carbon, request: Request): Collection
    + getChartData(start: Carbon, end: Carbon): array
    + getServiceSummary(start: Carbon, end: Carbon): array
    + getServiceData(start: Carbon, end: Carbon, request: Request): Collection
    + getServiceChartData(start: Carbon, end: Carbon): array
    + parseDateRange(request: Request): array
}

' ===== TECHNICIAN CONTROLLERS =====

class TeknisiServiceTicketController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(ticket: ServiceTicket): View
    + calendar(): View
    + calendarEvents(): JsonResponse
    + updateStatus(request: Request, ticket: ServiceTicket): RedirectResponse
    + storeAction(request: Request, ticket: ServiceTicket): RedirectResponse
    + destroyAction(ticket: ServiceTicket, action: ServiceAction): RedirectResponse
    + checkSlotAvailability(request: Request): JsonResponse
    --
    + createServiceTicket(data: array): ServiceTicket
    + updateTicketStatus(ticketId: string, status: string): boolean
    + addServiceAction(ticketId: string, action: string): ServiceAction
    + removeServiceAction(actionId: int): boolean
    + checkSlotAvailabilityInternal(adminId: int, date: string, timeSlot: string): array
    + getCalendarEvents(): Collection
}

class TeknisiOrderServiceController {
    --
    + index(): View
    + show(id: string): View
    + update(request: Request, id: string): RedirectResponse
    --
    + getAssignedOrders(): Collection
    + updateServiceProgress(id: string, data: array): boolean
    + completeService(id: string): boolean
    + reportIssue(id: string, issue: string): boolean
}

class TeknisiPaymentController {
    --
    + index(): View
    + show(id: string): View
    + processPayment(request: Request, id: string): RedirectResponse
    --
    + getPaymentRequests(): Collection
    + processServicePayment(paymentId: string, data: array): boolean
    + validateCashPayment(amount: decimal, received: decimal): array
}

' ===== RELATIONSHIPS =====

' Authentication & User Management
AuthController --> Admin
ManajemenPenggunaController --> Admin

' Base Controller Inheritance
BaseController <|-- OwnerOrderProductController
BaseController <|-- OwnerOrderServiceController
BaseController <|-- OwnerPaymentController
BaseController <|-- LaporanController
BaseController <|-- TeknisiServiceTicketController
BaseController <|-- TeknisiOrderServiceController
BaseController <|-- TeknisiPaymentController

' Owner Controller to Model Relationships
OwnerOrderProductController --> OrderProduct
OwnerOrderProductController --> OrderProductItem
OwnerOrderProductController --> Shipping
OwnerOrderServiceController --> OrderService
OwnerOrderServiceController --> OrderServiceItem
OwnerPaymentController --> PaymentDetail
LaporanController --> OrderProduct
LaporanController --> OrderService
LaporanController --> PaymentDetail

' Technician Controller to Model Relationships
TeknisiServiceTicketController --> ServiceTicket
TeknisiServiceTicketController --> ServiceAction
TeknisiOrderServiceController --> OrderService
TeknisiPaymentController --> PaymentDetail

' Model Relationships
Admin ||--o{ ServiceTicket
Customer ||--o{ CustomerAddress
Customer ||--o{ OrderProduct
Customer ||--o{ OrderService
Category ||--o{ Product
Category ||--o{ Service
Brand ||--o{ Product
Product ||--o{ ProductImage
Product ||--o{ OrderProductItem
Service ||--o{ OrderServiceItem
OrderProduct ||--o{ OrderProductItem
OrderProduct ||--o{ PaymentDetail
OrderProduct ||--o| Shipping
OrderService ||--o{ OrderServiceItem
OrderService ||--o{ PaymentDetail
OrderService ||--o{ ServiceTicket
ServiceTicket ||--o{ ServiceAction

@enduml
