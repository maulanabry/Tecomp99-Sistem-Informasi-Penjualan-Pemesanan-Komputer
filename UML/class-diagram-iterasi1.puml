@startuml Admin E-commerce & Service Management System

skinparam linetype ortho
skinparam classAttributeIconSize 0
skinparam classFontSize 9
skinparam nodesep 10
skinparam ranksep 20
skinparam class {
    BackgroundColor White
    BorderColor Black
    ArrowColor Black
}

class Admin {
    - id: int
    - name: string
    - email: string
    - password: string
    - role: string
    - theme: string
    - last_seen_at: datetime
    - email_verified_at: datetime
    --
    + login(email: string, password: string): boolean
    + logout(): void
    + cekOtorisasi(permission: string): boolean
    + isOnline(): boolean
    + updateLastSeen(): void
    + hasRole(role: string): boolean
}

abstract class BaseController {
    # admin: Admin
    --
    + __construct()
    # authorize(permission: string): void
    # validateRequest(rules: array): array
}

class CategoryController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(id: int): View
    + edit(id: int): View
    + update(request: Request, id: int): RedirectResponse
    + destroy(id: int): RedirectResponse
    + recovery(): View
    + restore(id: int): RedirectResponse
    + forceDelete(id: int): RedirectResponse
    --
    + buatKategori(data: array): Category
    + updateKategori(id: int, data: array): boolean
    + hapusKategori(id: int): boolean
    + pulihkanKategori(id: int): boolean
}

class ProductController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(id: string): View
    + edit(id: string): View
    + update(request: Request, id: string): RedirectResponse
    + destroy(id: string): RedirectResponse
    --
    + buatProduk(data: array): Product
    + updateProduk(id: string, data: array): boolean
    + hapusProduk(id: string): boolean
    + kelolaGambarProduk(productId: string, images: array): void
    + updateStok(productId: string, stock: int): boolean
    + toggleStatus(productId: string): boolean
}

class ServiceController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(id: string): View
    + edit(id: string): View
    + update(request: Request, id: string): RedirectResponse
    + destroy(id: string): RedirectResponse
    --
    + buatLayanan(data: array): Service
    + updateLayanan(id: string, data: array): boolean
    + hapusLayanan(id: string): boolean
    + updateHarga(serviceId: string, price: decimal): boolean
    + toggleKetersediaan(serviceId: string): boolean
}

class VoucherController {
    --
    + index(): View
    + create(): View
    + store(request: Request): RedirectResponse
    + show(id: int): View
    + edit(id: int): View
    + update(request: Request, id: int): RedirectResponse
    + destroy(id: int): RedirectResponse
    --
    + buatVoucher(data: array): Voucher
    + updateVoucher(id: int, data: array): boolean
    + hapusVoucher(id: int): boolean
    + validasiVoucher(code: string): boolean
    + toggleStatus(id: int): boolean
    + cekMasaBerlaku(id: int): boolean
}

class CustomerController {
    --
    + index(): View
    + show(id: string): View
    + edit(id: string): View
    + update(request: Request, id: string): RedirectResponse
    + destroy(id: string): RedirectResponse
    --
    + lihatDetailCustomer(id: string): Customer
    + updateDataCustomer(id: string, data: array): boolean
    + hapusCustomer(id: string): boolean
    + kelolaAlamat(customerId: string): Collection
    + resetPassword(customerId: string): boolean
    + toggleStatus(customerId: string): boolean
}

class OrderProductController {
    --
    + index(): View
    + show(id: string): View
    + edit(id: string): View
    + update(request: Request, id: string): RedirectResponse
    --
    + lihatDaftarPesanan(): Collection
    + lihatDetailPesanan(id: string): OrderProduct
    + updateStatusPesanan(id: string, status: string): boolean
    + konfirmasiPembayaran(id: string): boolean
    + prosesGaransi(id: string, months: int): boolean
    + batalkanPesanan(id: string, reason: string): boolean
}

class OrderServiceController {
    --
    + index(): View
    + show(id: string): View
    + edit(id: string): View
    + update(request: Request, id: string): RedirectResponse
    --
    + lihatDaftarPesananLayanan(): Collection
    + lihatDetailPesanan(id: string): OrderService
    + updateStatusPesanan(id: string, status: string): boolean
    + lihatFileKeluhan(id: string): Collection
    + tugaskanTeknisi(orderId: string, adminId: int): boolean
    + aturJadwalLayanan(orderId: string, schedule: datetime): boolean
}

class PaymentController {
    --
    + index(): View
    + show(id: string): View
    + confirm(request: Request, id: string): RedirectResponse
    + reject(request: Request, id: string): RedirectResponse
    --
    + lihatPembayaranPending(): Collection
    + konfirmasiPembayaran(paymentId: string): boolean
    + tolakPembayaran(paymentId: string, reason: string): boolean
    + validasiBuktiPembayaran(paymentId: string): boolean
    + updateStatusPembayaran(paymentId: string, status: string): boolean
}

class TechnicianScheduleController {
    --
    + index(): View
    + show(id: string): View
    + assign(request: Request): RedirectResponse
    + schedule(request: Request): RedirectResponse
    --
    + lihatAntrianLayanan(): Collection
    + lihatJadwalTeknisi(): Collection
    + tugaskanTiketLayanan(ticketId: string, adminId: int): boolean
    + aturSlotWaktu(ticketId: string, schedule: datetime): boolean
    + updateStatusTiket(ticketId: string, status: string): boolean
    + lihatBebanKerjaTeknisi(adminId: int): array
}

class Category {
    - categories_id: int
    - name: string
    - type: string
    - slug: string
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + products(): HasMany
    + services(): HasMany
    + generateSlug(): string
}

class Brand {
    - brand_id: int
    - name: string
    - slug: string
    - logo: string
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + products(): HasMany
}

class Product {
    - product_id: string
    - categories_id: int
    - brand_id: int
    - name: string
    - description: string
    - price: decimal
    - weight: int
    - stock: int
    - is_active: boolean
    - sold_count: int
    - slug: string
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + category(): BelongsTo
    + brand(): BelongsTo
    + images(): HasMany
    + getThumbnailUrl(): string
    + updateStock(quantity: int): void
    + incrementSoldCount(): void
}

class ProductImage {
    - id: int
    - product_id: string
    - url: string
    - is_main: boolean
    - created_at: datetime
    - updated_at: datetime
    --
    + product(): BelongsTo
}

class Service {
    - service_id: string
    - categories_id: int
    - name: string
    - description: string
    - price: decimal
    - thumbnail: string
    - slug: string
    - is_active: boolean
    - sold_count: int
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + category(): BelongsTo
    + getThumbnailUrl(): string
    + incrementSoldCount(): void
}

class Voucher {
    - voucher_id: int
    - code: string
    - name: string
    - type: string
    - discount_percentage: decimal
    - discount_amount: decimal
    - minimum_order_amount: decimal
    - is_active: boolean
    - used_count: int
    - start_date: date
    - end_date: date
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + isCurrentlyValid(): boolean
    + canBeUsed(): boolean
    + incrementUsedCount(): void
    + calculateDiscount(orderAmount: decimal): decimal
}

class Customer {
    - customer_id: string
    - name: string
    - email: string
    - password: string
    - contact: string
    - gender: string
    - photo: string
    - hasAccount: boolean
    - hasAddress: boolean
    - last_active: datetime
    - service_orders_count: int
    - product_orders_count: int
    - total_points: int
    - email_verified_at: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + addresses(): HasMany
    + defaultAddress(): HasOne
    + orderProducts(): HasMany
    + orderServices(): HasMany
    + cartItems(): HasMany
    + notifications(): MorphMany
    + chats(): HasMany
    + getFormattedAddress(): string
    + getWhatsappLink(): string
}

class CustomerAddress {
    - id: int
    - customer_id: string
    - detail_address: string
    - is_default: boolean
    - created_at: datetime
    - updated_at: datetime
    --
    + customer(): BelongsTo
}

class OrderProduct {
    - order_product_id: string
    - customer_id: string
    - status_order: string
    - status_payment: string
    - sub_total: decimal
    - discount_amount: decimal
    - grand_total: decimal
    - shipping_cost: decimal
    - type: string
    - note: string
    - warranty_period_months: int
    - warranty_expired_at: datetime
    - paid_amount: decimal
    - remaining_balance: decimal
    - last_payment_at: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + customer(): BelongsTo
    + items(): HasMany
    + payments(): HasMany
    + shipping(): HasOne
    + updatePaymentStatus(): void
    + processPayment(amount: decimal, type: string): decimal
    + canAcceptPayment(): boolean
    + getWarrantyStatus(): array
}

class OrderProductItem {
    - id: int
    - order_product_id: string
    - product_id: string
    - quantity: int
    - price: decimal
    - total: decimal
    - created_at: datetime
    - updated_at: datetime
    --
    + orderProduct(): BelongsTo
    + product(): BelongsTo
}

class OrderService {
    - order_service_id: string
    - customer_id: string
    - status_order: string
    - status_payment: string
    - complaints: string
    - type: string
    - device: string
    - note: string
    - hasTicket: boolean
    - hasDevice: boolean
    - sub_total: decimal
    - grand_total: decimal
    - discount_amount: decimal
    - warranty_period_months: int
    - warranty_expired_at: datetime
    - paid_amount: decimal
    - remaining_balance: decimal
    - last_payment_at: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + customer(): BelongsTo
    + items(): HasMany
    + images(): HasMany
    + media(): HasMany
    + tickets(): HasMany
    + paymentDetails(): HasMany
    + updatePaymentStatus(): void
    + processPayment(amount: decimal, type: string): decimal
    + canAcceptPayment(): boolean
    + getWarrantyStatus(): array
}

class OrderServiceItem {
    - id: int
    - order_service_id: string
    - service_id: string
    - quantity: int
    - price: decimal
    - total: decimal
    - created_at: datetime
    - updated_at: datetime
    --
    + orderService(): BelongsTo
    + service(): BelongsTo
}

class PaymentDetail {
    - payment_id: string
    - order_product_id: string
    - order_service_id: string
    - method: string
    - amount: decimal
    - change_returned: decimal
    - name: string
    - status: string
    - payment_type: string
    - order_type: string
    - proof_photo: string
    - cash_received: decimal
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + orderProduct(): BelongsTo
    + orderService(): BelongsTo
    + getOrder(): Model
    + validate(): array
    + getFormattedAmount(): string
    + getProofPhotoUrl(): string
}

class ServiceTicket {
    - service_ticket_id: string
    - order_service_id: string
    - admin_id: int
    - status: string
    - schedule_date: datetime
    - estimation_days: int
    - estimate_date: datetime
    - visit_schedule: datetime
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime
    --
    + orderService(): BelongsTo
    + admin(): BelongsTo
    + actions(): HasMany
    + updateStatus(status: string): void
    + assignTechnician(adminId: int): void
}

class ServiceAction {
    - id: int
    - service_ticket_id: string
    - action: string
    - description: string
    - created_at: datetime
    - updated_at: datetime
    --
    + serviceTicket(): BelongsTo
}

class Shipping {
    - id: int
    - order_product_id: string
    - courier: string
    - service: string
    - cost: decimal
    - tracking_number: string
    - status: string
    - created_at: datetime
    - updated_at: datetime
    --
    + orderProduct(): BelongsTo
}

BaseController <|-- CategoryController
BaseController <|-- ProductController
BaseController <|-- ServiceController
BaseController <|-- VoucherController
BaseController <|-- CustomerController
BaseController <|-- OrderProductController
BaseController <|-- OrderServiceController
BaseController <|-- PaymentController
BaseController <|-- TechnicianScheduleController

CategoryController --> Category
ProductController --> Product
ProductController --> Brand
ProductController --> ProductImage
ServiceController --> Service
VoucherController --> Voucher
CustomerController --> Customer
CustomerController --> CustomerAddress
OrderProductController --> OrderProduct
OrderProductController --> OrderProductItem
OrderServiceController --> OrderService
OrderServiceController --> OrderServiceItem
PaymentController --> PaymentDetail
TechnicianScheduleController --> ServiceTicket
TechnicianScheduleController --> ServiceAction

Category ||--o{ Product
Category ||--o{ Service
Brand ||--o{ Product
Product ||--o{ ProductImage
Customer ||--o{ CustomerAddress
Customer ||--o{ OrderProduct
Customer ||--o{ OrderService
OrderProduct ||--o{ OrderProductItem
OrderProduct ||--o{ PaymentDetail
OrderProduct ||--o| Shipping
OrderService ||--o{ OrderServiceItem
OrderService ||--o{ PaymentDetail
OrderService ||--o{ ServiceTicket
Product ||--o{ OrderProductItem
Service ||--o{ OrderServiceItem
ServiceTicket ||--o{ ServiceAction
Admin ||--o{ ServiceTicket

@enduml
